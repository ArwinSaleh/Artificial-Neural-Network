import numpy as np
import matplotlib.pyplot as plt

x1_temp = np.array([[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1], [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1], [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1], [-1, 1, 1, 1, -1, -1, 1, 1, 1, -1],
                    [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]])

x2_temp = np.array([[-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
                    [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1]])

x3_temp = np.array(
    [[1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
     [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
     [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
     [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
     [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
     [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
     [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
     [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1]])

x4_temp = np.array(
    [[-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1],
     [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1],
     [-1, -1, -1, -1, -1, -1, 1, 1, 1, -1], [-1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
     [-1, -1, 1, 1, 1, 1, 1, 1, -1, -1]])

x5_temp = np.array([[-1, 1, 1, -1, -1, -1, -1, 1, 1, -1], [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1], [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, 1, 1, -1, -1, -1, -1, 1, 1, -1], [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
                    [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1],
                    [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1]])

feed1a_temp = [[1, 1, 1, -1, -1, -1, -1, 1, 1, 1], [1, 1, 1, -1, -1, -1, -1, 1, 1, 1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1], [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1],
               [-1, -1, -1, 1, 1, 1, 1, -1, -1, -1]]

feed2a_temp = [1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
               -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
               -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1,
               -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1,
               -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1]

feed3a_temp = [1, 1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1,
               -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
               -1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, -1,
               -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, 1]

test = [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1,
        1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1,
        1, -1, -1, -1, 1, 1,
        -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1,
        -1, -1, 1, 1, 1, 1, 1, 1, 1,
        -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1,
        -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1]

x_patterns = [x1_temp.flatten().T, x2_temp.flatten().T, x3_temp.flatten().T,
              x4_temp.flatten().T, x5_temp.flatten().T]

N = 160


def sgn(i):  # This method is used to define the signum function at signum(0).

    if i == 0:
        return 1
    else:
        return np.sign(i)


def print_result(state):
    state = np.reshape(state, (16, 10))
    print(repr(state))  # This prints out the result in a format that openTA accepts.


def plot_result(state):
    state = np.reshape(state, (16, 10))
    plt.imshow(state, cmap="gray")
    plt.show()


def generate_weight(undisturbed_patterns):
    weight_matrix = np.zeros((N, N))  # Generates an NxN-matrix of zeros
    patterns = np.matrix(undisturbed_patterns).T

    for i in range(0, len(x_patterns)):
        weight_matrix = weight_matrix + np.dot(patterns[:, i], (np.transpose(patterns[:, i])))
    weight_matrix = weight_matrix / N
    np.fill_diagonal(weight_matrix, 0)

    return weight_matrix


def main(feed_pattern, undisturbed_patterns):
    weights = generate_weight(undisturbed_patterns)
    state = feed_pattern
    convergence = 0
    steady_patterns = x_patterns
    while convergence == 0:

        for i in range(0, N):
            state[i] = sgn((1 / N) * np.dot(weights[i], state))

        for steady_state in steady_patterns:  # We test to see if the state
            # has converged to one of the steady ones.
            error = 0
            for j in range(0, N):
                if state[j] != steady_state[j]:  # We compare each element of the state to the steady-state elements
                    error = error + 1

            if error == 0:  # If true, then the state is equal to one of the steady-states and we are done.
                convergence = 1

            if convergence == 0:  # We account for the inverse of all patterns as well.
                steady_patterns = np.dot(-1, steady_patterns)
    return state


def task1():
    feed1a = np.array(feed1a_temp)
    feed1a = feed1a.flatten().T
    res = main(feed1a, x_patterns)
    print_result(res)
    plot_result(res)


def task2():
    feed2a = np.array(feed2a_temp)
    feed2a = feed2a.flatten().T
    res = main(feed2a, x_patterns)
    print_result(res)
    plot_result(res)


def task3():
    feed3a = np.array(feed3a_temp)
    feed3a = feed3a.flatten().T
    res = main(feed3a, x_patterns)
    print_result(res)
    plot_result(res)


def test_inverse():
    feed = np.transpose(test)
    res = main(feed, x_patterns)
    print(res)
    plot_result(res)


#task1()  # UNCOMMENT TO TEST FOR TASK1
#task2()  # UNCOMMENT TO TEST FOR TASK2
task3()  # UNCOMMENT TO TEST FOR TASK3

test_inverse()
